#import tkinter as tk
import ttkbootstrap as ttk
from ttkbootstrap import Style
from tkinter import messagebox
import sqlite3
import subprocess

# Create account code block
def create_account():
    username = entry_username.get()
    password = entry_password.get()

    # Connect to the database
    conn = sqlite3.connect("user_db.sqlite")
    cursor = conn.cursor()

    # Create the "users" table if it doesn't exist
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )""")

    # conn.close()

    conn = sqlite3.connect("user_db.sqlite")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    existing_user = cursor.fetchone()

    if existing_user:
        messagebox.showerror("Account Creation Failed", "Username already exists")
    else:
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
        conn.commit()
        messagebox.showinfo("Account Created", "Your account has been created successfully!")

    conn.close()


# This code block will delete account information from the database
def delete_account():
    username = entry_username.get()

    conn = sqlite3.connect("user_db.sqlite")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    existing_user = cursor.fetchone()

    # This checks to find if the user information exists in the database.
    if existing_user:
        cursor.execute("DELETE FROM users WHERE username=?", (username,))
        conn.commit()
        messagebox.showinfo("Account Deleted", "Your account has been deleted successfully!")
    else:
        messagebox.showerror("Account Deletion Failed", "Invalid username")

    conn.close()


# This block of code checks to find if the user information exists in the database.
# and if it exists, the system will allow the user to access the main application
def authenticate_user():
    username = entry_username.get()
    password = entry_password.get()

    conn = sqlite3.connect("user_db.sqlite")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
    user = cursor.fetchone()

    if user:
        window.withdraw()
        #messagebox.showinfo("Login Successful", "Welcome, {}".format(username))
        # Open your application here
        subprocess.Popen(["calc.exe"])
    else:
        messagebox.showerror("Login Failed", "Invalid username or password")

    conn.close()


# The block allows the user to update the user password
def update_user_login():
    username = entry_username.get()
    new_password = entry_password.get()

    conn = sqlite3.connect("user_db.sqlite")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username=?", (username,))
    existing_user = cursor.fetchone()

    if existing_user:
        cursor.execute("UPDATE users SET password=? WHERE username=?", (new_password, username))
        conn.commit()
        messagebox.showinfo("Update Successful", "Your password has been updated successfully!")
    else:
        messagebox.showerror("Update Failed", "Invalid username")

    conn.close()


# Database information ends


# Create the main window
window = ttk.Window()
window.title("User Authentication")
window.geometry("455x563")
window.configure(background='#89BED0')


style = Style(theme='yeti')
window = style.master


def whatever():
    window.destroy()

window.protocol("WM_DELETE_WINDOW", whatever)

# Create a frame to hold the GUI elements
frame = ttk.Frame(window)
frame.pack(expand=True)

# Create username label and entry field
label_username = ttk.Label(frame, text="Username:")
label_username.grid(row=0, column=0, padx=10, pady=10)
entry_username = ttk.Entry(frame)
entry_username.grid(row=0, column=1, padx=10, pady=10)

# Create password label and entry field
label_password = ttk.Label(frame, text="Password:")
label_password.grid(row=1, column=0, padx=10, pady=10)
entry_password = ttk.Entry(frame, show="*")
entry_password.grid(row=1, column=1, padx=10, pady=10)

# Create account button
btn_create_account = ttk.Button(frame, text="Create Account", width=20, command=create_account)
btn_create_account.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

# Create delete account button
btn_delete_account = ttk.Button(frame, text="Delete Account", width=20, command=delete_account)
btn_delete_account.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

# Create login button
btn_login = ttk.Button(frame, text="Login", width=20, command=authenticate_user)
btn_login.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

# Create update user login button
btn_update_login = ttk.Button(frame, text="Update User Login", width=20, command=update_user_login)
btn_update_login.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

# Center the main window within the screen
window.update_idletasks()
window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
x = int((screen_width / 2) - (window_width / 2))
y = int((screen_height / 2) - (window_height / 2))
window.geometry(f"{window_width}x{window_height}+{x}+{y}")

# Shows the mainwindow when the code is run
window.mainloop()
